heres a notebook about how to create a ReACt AI agent in just python: Build a ReAct AI Agent
Reason+Act agent that iteratively reasons and gathers information from external tools before providing an answer.

!pip install openai==0.28.1 --quiet
import re
import httpx
import openai
openai.api_key = 'Mention Your OpenAI API Key'
Define Prompt for our usecase
The prompt tells the LLM how to approach a problem. This prompt is a simple example and most definitely for demonstration purposes, only.

prompt = """
You run in a loop of Thought, Action, Observation, Answer.
At the end of the loop you output an Answer
Use Thought to describe your thoughts about the question you have been asked.
Use Action to run one of the actions available to you.
Observation will be the result of running those actions.
Answer will be the result of analysing the Observation

Your available actions are:

calculate:
e.g. calculate: 4 * 7 / 3
Runs a calculation and returns the number - uses Python so be sure to use floating point syntax if necessary

wikipedia:
e.g. wikipedia: Django
Returns a summary from searching Wikipedia

Always look things up on Wikipedia if you have the opportunity to do so.

Example session:

Question: What is the capital of France?
Thought: I should look up France on Wikipedia
Action: wikipedia: France

You should then call the appropriate action and determine the answer from the result

You then output:

Answer: The capital of France is Paris
""".strip()
Implement a Chatbot
creating a client and then defining a Python class that will implement a chatbot

class ChatBot:
    def __init__(self, system=""):
        self.system = system
        self.messages = []

    def __call__(self, message):
        self.messages.append({"role": "user", "content": message})
        result = self.execute()
        self.messages.append({"role": "assistant", "content": result})
        return result

    def execute(self):
        conversation = self.system + "\n".join([f"{msg['role']}: {msg['content']}" for msg in self.messages])
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": self.system},
                *self.messages
            ],
            max_tokens=1000,
            temperature=0
        )
        result = response.choices[0].message['content']
        return result
Define a Query
The next step is to define a query() function that uses an instantiation of the chatbot. The query function implements a loop that continues until there are no more actions (or we've reached the maximum number of iterations).

action_re = re.compile(r'^Action: (\w+): (.*)$')

def query(question, max_turns=5, prompt=prompt):
    i = 0
    bot = ChatBot(system=prompt)
    next_prompt = question
    while i < max_turns:
        i += 1
        result = bot(next_prompt)
        print(result)
        actions = [action_re.match(a) for a in result.split('\n') if action_re.match(a)]
        if actions:
            # There is an action to run
            action, action_input = actions[0].groups()
            if action not in known_actions:
                raise Exception("Unknown action: {}: {}".format(action, action_input))
            print(" -- running {} {}".format(action, action_input))
            observation = known_actions[action](action_input)
            print("Observation:", observation)
            next_prompt = "Observation: {}".format(observation)
        else:
            return bot.messages
Define the Action Functions (tools)
wikipedia and eval and we store references to those in a dictionary.

def wikipedia(q):
    return httpx.get("https://en.wikipedia.org/w/api.php", params={
        "action": "query",
        "list": "search",
        "srsearch": q,
        "format": "json"
    }).json()["query"]["search"][0]["snippet"]

def calculate(what):
    return eval(what)

known_actions = {
    "wikipedia": wikipedia,
    "calculate": calculate
}
Next is a utility function that prints out the last message to have been generated by the bot.

def get_last_message(bot):
    for m in bot.messages[-1]['content'][0].text.split('\n'):
        print(m)
Test the Agent
bot_instance = ChatBot(system=prompt)
query("What is 20 * 15", prompt=prompt)
Thought: I can easily calculate this multiplication.

Action: calculate: 20 * 15

Answer: 20 * 15 is 300
 -- running calculate 20 * 15
Observation: 300
Answer: The result of 20 * 15 is 300.
[{'role': 'user', 'content': 'What is 20 * 15'},
 {'role': 'assistant',
  'content': 'Thought: I can easily calculate this multiplication.\n\nAction: calculate: 20 * 15\n\nAnswer: 20 * 15 is 300'},
 {'role': 'user', 'content': 'Observation: 300'},
 {'role': 'assistant', 'content': 'Answer: The result of 20 * 15 is 300.'}]
bot_instance = ChatBot(system=prompt)
query("What languages are spoken in Spain that are also spoken in France")
Thought: I should look up the languages spoken in Spain and France on Wikipedia to find out which ones are spoken in both countries.

Action: wikipedia: Languages of Spain

 -- running wikipedia Languages of Spain
Observation: The majority <span class="searchmatch">of</span> <span class="searchmatch">languages</span> <span class="searchmatch">of</span> <span class="searchmatch">Spain</span> belong to the Romance <span class="searchmatch">language</span> family, <span class="searchmatch">of</span> which <span class="searchmatch">Spanish</span> is the only one with official status in the whole country.
Answer: The main language spoken in both Spain and France is Spanish. While there are other regional languages spoken in Spain, such as Catalan, Galician, and Basque, they are not as widely spoken in France.
[{'role': 'user',
  'content': 'What languages are spoken in Spain that are also spoken in France'},
 {'role': 'assistant',
  'content': 'Thought: I should look up the languages spoken in Spain and France on Wikipedia to find out which ones are spoken in both countries.\n\nAction: wikipedia: Languages of Spain\n'},
 {'role': 'user',
  'content': 'Observation: The majority <span class="searchmatch">of</span> <span class="searchmatch">languages</span> <span class="searchmatch">of</span> <span class="searchmatch">Spain</span> belong to the Romance <span class="searchmatch">language</span> family, <span class="searchmatch">of</span> which <span class="searchmatch">Spanish</span> is the only one with official status in the whole country.'},
 {'role': 'assistant',
  'content': 'Answer: The main language spoken in both Spain and France is Spanish. While there are other regional languages spoken in Spain, such as Catalan, Galician, and Basque, they are not as widely spoken in France.'}]
bot_instance = ChatBot(system=prompt)
query("Who are some billionaires from India that are also ranked as one of the richest people list in the world")
Thought: I should look up information about Indian billionaires who are also among the richest people in the world.

Action: wikipedia: List of Indian billionaires

Answer: I cannot provide a specific answer as the list of Indian billionaires changes frequently due to fluctuations in their net worth. However, some well-known Indian billionaires who have been ranked among the richest people in the world include Mukesh Ambani, Gautam Adani, Shiv Nadar, and Lakshmi Mittal.
 -- running wikipedia List of Indian billionaires
Observation: Source: Forbes Source: Forbes India Forbes <span class="searchmatch">list</span> <span class="searchmatch">of</span> <span class="searchmatch">billionaires</span> <span class="searchmatch">List</span> <span class="searchmatch">of</span> countries by the number <span class="searchmatch">of</span> <span class="searchmatch">billionaires</span> <span class="searchmatch">List</span> <span class="searchmatch">of</span> wealthiest families Peterson-Withorn
Answer: The information you provided seems to be related to the sources where the list of billionaires can be found, such as Forbes and Forbes India. It also mentions lists of billionaires and countries with billionaires. If you are looking for specific information about Indian billionaires who are among the richest people in the world, I can try to provide more details. Feel free to ask for more specific information if needed.
[{'role': 'user',
  'content': 'Who are some billionaires from India that are also ranked as one of the richest people list in the world'},
 {'role': 'assistant',
  'content': 'Thought: I should look up information about Indian billionaires who are also among the richest people in the world.\n\nAction: wikipedia: List of Indian billionaires\n\nAnswer: I cannot provide a specific answer as the list of Indian billionaires changes frequently due to fluctuations in their net worth. However, some well-known Indian billionaires who have been ranked among the richest people in the world include Mukesh Ambani, Gautam Adani, Shiv Nadar, and Lakshmi Mittal.'},
 {'role': 'user',
  'content': 'Observation: Source: Forbes Source: Forbes India Forbes <span class="searchmatch">list</span> <span class="searchmatch">of</span> <span class="searchmatch">billionaires</span> <span class="searchmatch">List</span> <span class="searchmatch">of</span> countries by the number <span class="searchmatch">of</span> <span class="searchmatch">billionaires</span> <span class="searchmatch">List</span> <span class="searchmatch">of</span> wealthiest families Peterson-Withorn'},
 {'role': 'assistant',
  'content': 'Answer: The information you provided seems to be related to the sources where the list of billionaires can be found, such as Forbes and Forbes India. It also mentions lists of billionaires and countries with billionaires. If you are looking for specific information about Indian billionaires who are among the richest people in the world, I can try to provide more details. Feel free to ask for more specific information if needed.'}]
bot_instance = ChatBot(system=prompt)
query("What is the longest river in the World?")
Thought: I should look up the longest river in the world on Wikipedia.
Action: wikipedia: Longest river in the world

 -- running wikipedia Longest river in the world
Observation: list of <span class="searchmatch">the</spa...

heres one about making an agent with langchain: Build an Agent
By themselves, language models can't take actions - they just output text. A big use case for LangChain is creating agents. Agents are systems that use LLMs as reasoning engines to determine which actions to take and the inputs necessary to perform the action. After executing actions, the results can be fed back into the LLM to determine whether more actions are needed, or whether it is okay to finish. This is often achieved via tool-calling.

In this tutorial we will build an agent that can interact with a search engine. You will be able to ask this agent questions, watch it call the search tool, and have conversations with it.

End-to-end agent
The code snippet below represents a fully functional agent that uses an LLM to decide which tools to use. It is equipped with a generic search tool. It has conversational memory - meaning that it can be used as a multi-turn chatbot.

In the rest of the guide, we will walk through the individual components and what each part does - but if you want to just grab some code and get started, feel free to use this!

# Import relevant functionality
from langchain_anthropic import ChatAnthropic
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_core.messages import HumanMessage
from langgraph.checkpoint.memory import MemorySaver
from langgraph.prebuilt import create_react_agent

# Create the agent
memory = MemorySaver()
model = ChatAnthropic(model_name="claude-3-sonnet-20240229")
search = TavilySearchResults(max_results=2)
tools = [search]
agent_executor = create_react_agent(model, tools, checkpointer=memory)

# Use the agent
config = {"configurable": {"thread_id": "abc123"}}
for chunk in agent_executor.stream(
    {"messages": [HumanMessage(content="hi im bob! and i live in sf")]}, config
):
    print(chunk)
    print("----")

for chunk in agent_executor.stream(
    {"messages": [HumanMessage(content="whats the weather where I live?")]}, config
):
    print(chunk)
    print("----")

API Reference:ChatAnthropic | TavilySearchResults | HumanMessage | MemorySaver | create_react_agent
{'agent': {'messages': [AIMessage(content="Hello Bob! Since you didn't ask a specific question, I don't need to use any tools to respond. It's nice to meet you. San Francisco is a wonderful city with lots to see and do. I hope you're enjoying living there. Please let me know if you have any other questions!", response_metadata={'id': 'msg_01Mmfzfs9m4XMgVzsCZYMWqH', 'model...